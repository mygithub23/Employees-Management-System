-- MySQL Script generated by MySQL Workbench
-- Sat Feb 13 22:56:48 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema employee
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `employee` ;

-- -----------------------------------------------------
-- Schema employee
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `employee` DEFAULT CHARACTER SET utf8 ;
USE `employee` ;

-- -----------------------------------------------------
-- Table `employee`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `employee`.`users` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `user_name` VARCHAR(45) NOT NULL,
  `date_created` TIMESTAMP NULL DEFAULT NULL,
  `date_modified` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `modified_by` INT NOT NULL DEFAULT '1',
  PRIMARY KEY (`user_id`),
  UNIQUE INDEX `fk_USER_USER_nameu` (`user_name` ASC) VISIBLE,
  INDEX `fk_USER_USER_idx` (`modified_by` ASC) INVISIBLE,
  CONSTRAINT `fk_USER_USER`
    FOREIGN KEY (`modified_by`)
    REFERENCES `employee`.`users` (`user_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `employee`.`departments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `employee`.`departments` (
  `dept_id` INT NOT NULL AUTO_INCREMENT,
  `dept_name` VARCHAR(45) NOT NULL,
  `date_created` TIMESTAMP NULL DEFAULT NULL,
  `date_modified` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `created_by` INT NOT NULL DEFAULT '1',
  `user_id` INT NULL DEFAULT '1',
  PRIMARY KEY (`dept_id`),
  UNIQUE INDEX `DEPT_NAME_uidx` (`dept_name` ASC) VISIBLE,
  INDEX `fk_DEPARTMENT_USER_C_idx` (`created_by` ASC) VISIBLE,
  INDEX `fk_DEPARTMENT_USER_M_idx` (`user_id` ASC) INVISIBLE,
  CONSTRAINT `fk_DEPARTMENT_USER_C`
    FOREIGN KEY (`created_by`)
    REFERENCES `employee`.`users` (`user_id`),
  CONSTRAINT `fk_DEPARTMENT_USER_M`
    FOREIGN KEY (`user_id`)
    REFERENCES `employee`.`users` (`user_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 12
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `employee`.`roles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `employee`.`roles` (
  `role_id` INT NOT NULL AUTO_INCREMENT,
  `role_title` VARCHAR(45) NOT NULL,
  `role_salary` DECIMAL(8,2) NOT NULL,
  `date_created` TIMESTAMP NULL DEFAULT NULL,
  `date_modified` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `created_by` INT NOT NULL DEFAULT '1',
  `user_id` INT NOT NULL DEFAULT '1',
  `dept_id` INT NOT NULL,
  PRIMARY KEY (`role_id`),
  UNIQUE INDEX `ROLE_TITLE_uidx` (`role_title` ASC) VISIBLE,
  INDEX `fk_ROLE_USER_C_idx` (`created_by` ASC) INVISIBLE,
  INDEX `fk_ROLE_USER_M_idx` (`user_id` ASC) VISIBLE,
  INDEX `ROLE_USER_idx` (`role_id` ASC) INVISIBLE,
  INDEX `ROLE_USER_titlex` (`role_title` ASC) INVISIBLE,
  INDEX `fk_roles_departments1_idx` (`dept_id` ASC) VISIBLE,
  CONSTRAINT `fk_ROLE_USER_C`
    FOREIGN KEY (`created_by`)
    REFERENCES `employee`.`users` (`user_id`),
  CONSTRAINT `fk_ROLE_USER_M`
    FOREIGN KEY (`user_id`)
    REFERENCES `employee`.`users` (`user_id`),
  CONSTRAINT `fk_roles_departments`
    FOREIGN KEY (`dept_id`)
    REFERENCES `employee`.`departments` (`dept_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 21
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `employee`.`employees`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `employee`.`employees` (
  `emp_id` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `date_created` TIMESTAMP NULL DEFAULT NULL,
  `date_modified` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `dept_id` INT NOT NULL,
  `created_by` INT NOT NULL DEFAULT '1',
  `role_id` INT NOT NULL,
  `manager_id` INT NOT NULL,
  `user_id` INT NOT NULL DEFAULT '1',
  PRIMARY KEY (`emp_id`),
  UNIQUE INDEX `EMPLOYEE_REC_uidx` (`first_name` ASC, `last_name` ASC, `dept_id` ASC, `role_id` ASC) VISIBLE,
  INDEX `fk_EMPLOYEE_DEPARTMENT_idx` (`dept_id` ASC) VISIBLE,
  INDEX `fk_EMPLOYEE_USERS_C_idx` (`created_by` ASC) VISIBLE,
  INDEX `fk_EMPLOYEE_ROLE_idx` (`role_id` ASC) VISIBLE,
  INDEX `fk_EMPLOYEE_MANAGER_idx` (`manager_id` ASC) VISIBLE,
  INDEX `fk_EMPLOYEE_USERS_M_idx` (`user_id` ASC) INVISIBLE,
  CONSTRAINT `fk_EMPLOYEE_DEPARTMENT`
    FOREIGN KEY (`dept_id`)
    REFERENCES `employee`.`departments` (`dept_id`),
  CONSTRAINT `fk_EMPLOYEE_EMPLOYEE`
    FOREIGN KEY (`manager_id`)
    REFERENCES `employee`.`employees` (`emp_id`),
  CONSTRAINT `fk_EMPLOYEE_ROLE`
    FOREIGN KEY (`role_id`)
    REFERENCES `employee`.`roles` (`role_id`),
  CONSTRAINT `fk_EMPLOYEE_USER_C`
    FOREIGN KEY (`created_by`)
    REFERENCES `employee`.`users` (`user_id`),
  CONSTRAINT `fk_EMPLOYEE_USER_M`
    FOREIGN KEY (`user_id`)
    REFERENCES `employee`.`users` (`user_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 15
DEFAULT CHARACTER SET = utf8;

USE `employee` ;

-- -----------------------------------------------------
-- Placeholder table for view `employee`.`departments_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `employee`.`departments_view` (`ID` INT, `Department Name` INT, `Date Modified` INT, `Modified By` INT);

-- -----------------------------------------------------
-- Placeholder table for view `employee`.`deptsalaryinsights_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `employee`.`deptsalaryinsights_view` (`dept_name` INT, `Dept total Salary` INT, `Dept Avg Salary` INT, `Dept Max Salary` INT, `Dept Min Salary` INT);

-- -----------------------------------------------------
-- Placeholder table for view `employee`.`empcountbydept_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `employee`.`empcountbydept_view` (`dept_name` INT, `Total Employees` INT);

-- -----------------------------------------------------
-- Placeholder table for view `employee`.`empcountbyrole_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `employee`.`empcountbyrole_view` (`Role Name` INT, `Total Employees` INT);

-- -----------------------------------------------------
-- Placeholder table for view `employee`.`employeelistbyrole_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `employee`.`employeelistbyrole_view` (`Role Title` INT, `Employee Name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `employee`.`employees_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `employee`.`employees_view` (`ID` INT, `Employee Name` INT, `Department Name` INT, `Role Title` INT, `Employee Salary` INT, `Date Modified` INT, `Modified by` INT);

-- -----------------------------------------------------
-- Placeholder table for view `employee`.`employees_view1`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `employee`.`employees_view1` (`first_name` INT, `last_name` INT, `dept_name` INT, `role_title` INT, `role_salary` INT, `date_created` INT, `date_modified` INT, `user_name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `employee`.`employesslistbymanager_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `employee`.`employesslistbymanager_view` (`Manager Name` INT, `Employee Name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `employee`.`emplyeeslistbydept_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `employee`.`emplyeeslistbydept_view` (`Department Name` INT, `Employee Name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `employee`.`roles_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `employee`.`roles_view` (`ID` INT, `Role Title` INT, `Department Name` INT, `Role Salary` INT, `Date Modified` INT, `Modified By` INT);

-- -----------------------------------------------------
-- Placeholder table for view `employee`.`unfulfilledroles_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `employee`.`unfulfilledroles_view` (`ID` INT, `Role Title` INT, `Department Name` INT, `Role Salary` INT, `Date Modified` INT, `Modified By` INT);

-- -----------------------------------------------------
-- View `employee`.`departments_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `employee`.`departments_view`;
USE `employee`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `employee`.`departments_view` AS select `employee`.`departments`.`dept_id` AS `ID`,`employee`.`departments`.`dept_name` AS `Department Name`,date_format(cast(`employee`.`departments`.`date_modified` as date),'%Y-%b-%d') AS `Date Modified`,`employee`.`users`.`user_name` AS `Modified By` from (`employee`.`departments` join `employee`.`users` on((`employee`.`departments`.`user_id` = `employee`.`users`.`user_id`))) order by `employee`.`departments`.`dept_name`;

-- -----------------------------------------------------
-- View `employee`.`deptsalaryinsights_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `employee`.`deptsalaryinsights_view`;
USE `employee`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `employee`.`deptsalaryinsights_view` AS select `employee`.`employees_view1`.`dept_name` AS `dept_name`,concat('$',format(sum(`employee`.`employees_view1`.`role_salary`),2)) AS `Dept total Salary`,concat('$',format(avg(`employee`.`employees_view1`.`role_salary`),2)) AS `Dept Avg Salary`,concat('$',format(max(`employee`.`employees_view1`.`role_salary`),2)) AS `Dept Max Salary`,concat('$',format(min(`employee`.`employees_view1`.`role_salary`),2)) AS `Dept Min Salary` from `employee`.`employees_view1` group by `employee`.`employees_view1`.`dept_name`;

-- -----------------------------------------------------
-- View `employee`.`empcountbydept_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `employee`.`empcountbydept_view`;
USE `employee`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `employee`.`empcountbydept_view` AS select `employee`.`employees_view1`.`dept_name` AS `dept_name`,count(0) AS `Total Employees` from `employee`.`employees_view1` group by `employee`.`employees_view1`.`dept_name` order by count(0);

-- -----------------------------------------------------
-- View `employee`.`empcountbyrole_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `employee`.`empcountbyrole_view`;
USE `employee`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `employee`.`empcountbyrole_view` AS select `employee`.`employees_view1`.`role_title` AS `Role Name`,count(0) AS `Total Employees` from `employee`.`employees_view1` group by `employee`.`employees_view1`.`role_title` order by count(0);

-- -----------------------------------------------------
-- View `employee`.`employeelistbyrole_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `employee`.`employeelistbyrole_view`;
USE `employee`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `employee`.`employeelistbyrole_view` AS select `employee`.`employees_view`.`Role Title` AS `Role Title`,`employee`.`employees_view`.`Employee Name` AS `Employee Name` from `employee`.`employees_view` order by `employee`.`employees_view`.`Role Title`;

-- -----------------------------------------------------
-- View `employee`.`employees_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `employee`.`employees_view`;
USE `employee`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `employee`.`employees_view` AS select `e`.`emp_id` AS `ID`,concat(`e`.`last_name`,', ',`e`.`first_name`) AS `Employee Name`,`employee`.`departments`.`dept_name` AS `Department Name`,`employee`.`roles`.`role_title` AS `Role Title`,concat('$',format(`employee`.`roles`.`role_salary`,2)) AS `Employee Salary`,date_format(cast(`e`.`date_modified` as date),'%Y-%b-%d') AS `Date Modified`,`employee`.`users`.`user_name` AS `Modified by` from (((`employee`.`employees` `e` join `employee`.`departments` on((`e`.`dept_id` = `employee`.`departments`.`dept_id`))) join `employee`.`roles` on((`e`.`role_id` = `employee`.`roles`.`role_id`))) join `employee`.`users` on((`e`.`user_id` = `employee`.`users`.`user_id`)));

-- -----------------------------------------------------
-- View `employee`.`employees_view1`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `employee`.`employees_view1`;
USE `employee`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `employee`.`employees_view1` AS select `e`.`first_name` AS `first_name`,`e`.`last_name` AS `last_name`,`employee`.`departments`.`dept_name` AS `dept_name`,`employee`.`roles`.`role_title` AS `role_title`,`employee`.`roles`.`role_salary` AS `role_salary`,date_format(cast(`e`.`date_created` as date),'%Y-%b-%d') AS `date_created`,date_format(cast(`e`.`date_modified` as date),'%Y-%b-%d') AS `date_modified`,`employee`.`users`.`user_name` AS `user_name` from (((`employee`.`employees` `e` join `employee`.`departments` on((`e`.`dept_id` = `employee`.`departments`.`dept_id`))) join `employee`.`roles` on((`e`.`role_id` = `employee`.`roles`.`role_id`))) join `employee`.`users` on((`e`.`user_id` = `employee`.`users`.`user_id`)));

-- -----------------------------------------------------
-- View `employee`.`employesslistbymanager_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `employee`.`employesslistbymanager_view`;
USE `employee`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `employee`.`employesslistbymanager_view` AS select concat(`v2`.`last_name`,', ',`v2`.`first_name`) AS `Manager Name`,concat(`v1`.`last_name`,', ',`v1`.`first_name`) AS `Employee Name` from (`employee`.`employees` `v1` join `employee`.`employees` `v2` on((`v1`.`emp_id` = `v2`.`manager_id`))) order by `v2`.`last_name`;

-- -----------------------------------------------------
-- View `employee`.`emplyeeslistbydept_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `employee`.`emplyeeslistbydept_view`;
USE `employee`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `employee`.`emplyeeslistbydept_view` AS select `employee`.`employees_view`.`Department Name` AS `Department Name`,`employee`.`employees_view`.`Employee Name` AS `Employee Name` from `employee`.`employees_view` order by `employee`.`employees_view`.`Department Name`;

-- -----------------------------------------------------
-- View `employee`.`roles_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `employee`.`roles_view`;
USE `employee`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `employee`.`roles_view` AS select `employee`.`roles`.`role_id` AS `ID`,`employee`.`roles`.`role_title` AS `Role Title`,`employee`.`departments`.`dept_name` AS `Department Name`,concat('$',format(`employee`.`roles`.`role_salary`,2)) AS `Role Salary`,date_format(cast(`employee`.`roles`.`date_modified` as date),'%Y-%b-%d') AS `Date Modified`,`employee`.`users`.`user_name` AS `Modified By` from ((`employee`.`roles` join `employee`.`users` on((`employee`.`roles`.`user_id` = `employee`.`users`.`user_id`))) join `employee`.`departments` on((`employee`.`roles`.`dept_id` = `employee`.`departments`.`dept_id`))) order by `employee`.`departments`.`dept_name`;

-- -----------------------------------------------------
-- View `employee`.`unfulfilledroles_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `employee`.`unfulfilledroles_view`;
USE `employee`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `employee`.`unfulfilledroles_view` AS select `employee`.`roles`.`role_id` AS `ID`,`employee`.`roles`.`role_title` AS `Role Title`,`employee`.`departments`.`dept_name` AS `Department Name`,concat('$',format(`employee`.`roles`.`role_salary`,2)) AS `Role Salary`,date_format(cast(`employee`.`roles`.`date_modified` as date),'%Y-%b-%d') AS `Date Modified`,`employee`.`users`.`user_name` AS `Modified By` from ((`employee`.`roles` join `employee`.`users` on((`employee`.`roles`.`user_id` = `employee`.`users`.`user_id`))) join `employee`.`departments` on((`employee`.`roles`.`dept_id` = `employee`.`departments`.`dept_id`))) where trim(`employee`.`roles`.`role_title`) in (select trim(`employee`.`employees_view`.`Role Title`) from `employee`.`employees_view`) is false order by `employee`.`roles`.`role_title`;
USE `employee`;

DELIMITER $$
USE `employee`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `employee`.`users_BEFORE_INSERT`
BEFORE INSERT ON `employee`.`users`
FOR EACH ROW
BEGIN
	SET NEW.date_created = now();
END$$

USE `employee`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `employee`.`departments_BEFORE_INSERT`
BEFORE INSERT ON `employee`.`departments`
FOR EACH ROW
BEGIN
	SET NEW.date_created = now();
END$$

USE `employee`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `employee`.`roles_BEFORE_INSERT`
BEFORE INSERT ON `employee`.`roles`
FOR EACH ROW
BEGIN
SET NEW.date_created = now();
END$$

USE `employee`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `employee`.`employee_BEFORE_INSERT`
BEFORE INSERT ON `employee`.`employees`
FOR EACH ROW
BEGIN
	SET NEW.date_created = now();
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
